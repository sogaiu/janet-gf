* start thinking about pretty printing
  * newline insertion is involved
  * possibly max line length / columns might be a factor
  * study pp.c and io.c
  * record rationale notes
    * help human to perceive
      * usages
      * pasting in chat
      * pasting in pastebin
    * challenges of text that is static
      * vertical constraints
        * janet sort of puts arrays and tuples on single line?
      * horizontal constraints
        * clojure.pprint punts

* differences from spork/fmt
  * spork/fmt doesn't preserve certain things
    * number of spaces before comments sometimes:

      (def a
        ``
        hello
       ``)    # see what happens on this line

      becomes:

      (def a
        ``
        hello
       ``) # see what happens on this line

    * in general during parsing via pegs, certain characters are
      discarded (e.g. delimiters, whitespace, etc.) and then
      "normalized" in output.
  * spork/fmt is faster

* could there be problems if there are "characters" that are made of
  more than one byte (e.g. some unicode things)?
  * possibly not likely before (and including) the first non-whitespace
    character on a line, which is what may be relevant for computing
    indentation.
  * actually might be an issue because tree-sitter's point stuff may
    require appropriate unicode handling to represent row and column
    info correctly?

* on windows there is some prompting during `jpm build` when some files
  are copied
  * determine if that can be disabled / overriden

* jpm install can get the executable into place but the _tree-sitter.*
  files also get installed presumably because of some incantations
  in project.janet added to get the build to succeed.  how to get
  the build to succeed without the _tree-sitter.* files being installed...
  * alternatively, just suggest the binary is copied or symlinked
  * alternatively, just suggest using `jpm quickbin`
    * looks like `jpm build` needs to be run first (at least for this project)
    * thus: `jpm build && jpm quickbin gf.janet gf`

* tests
  * before and after comparisons for certain files
  * compare with execution of a-janet-mode via emacs batch mode to try to
    detect differences in behavior
  * add more tests to cover calculate-indent cases:
    * ERROR
    * par_arr_lit
    * tuple
      * no child nodes -- verify what should happen with this
  * figure out a good way to compare with jfmt
    * jfmt overwrites the input file so that makes using it a little
      bit of extra work

* work on indentation of long strings
  * figure out what should / could be done
    * jfmt (spork/fmt) leaves long strings and buffers alone
    * possibly doing nothing is fine
  * check that that makes sense
  * consider prototyping in a-janet-mode
  * encode intent in parity of delimiter?
    * odd => format
    * even => leave alone
  * what about long buffers?

* what does gf stand for?
  * good formatter
  * good friend
  * gold(ilocks) formatter
  * green formatter

* consider different names
  * ajfmt
  * afmt
  * ajstyle

* why does this happen:

  $ JANET_PATH=$(pwd)/jpm-modules janet gf.janet samples/small-with-start-of-content-null.janet 
  parsed with an error in: samples/small-with-start-of-content-null.janet

  it seems that it may be related to janet string functions not handling
  nulls inside strings.

  does it still happen?
